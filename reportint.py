# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'report2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#---------------------------Ventana del reporte por paciente

from PySide6.QtWidgets import QWidget
from numpy.core.getlimits import iinfo
import psutil
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph.colormap import get
from datamngmt import *
from bokeh import embed
import dialog as dlg2
import pyqtgraph as pg

class Ui_Report(object):
    def setupUi(self, Dialog, idn=False):
        # se crean los elementos de la ventana

        #idn es el id del paciente seleccionado
        self.idn = idn
        if idn==False:
            self.pat = {"nombre": "nombre", "f_nacimiento": "1/01/2000", "sexo": "sexo", "peso_kg": "", "estatura_m": "", "escolaridad": "", "antecedentes": "", "semiologia": "", "historia_clinica": "", "eventos":[]}
        else:
            self.pat = get_patdat(idn+'.json')
            #self.pat es un diccionario con toda la informaci√≥n del paciente que se ha guardado: datos y medidas
        
        self.idn = idn
        Dialog.setObjectName("Dialog")
        Dialog.resize(991, 553)
        Dialog.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setMinimumSize(QtCore.QSize(991, 553))
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setMinimumSize(QtCore.QSize(600, 0))
        self.frame_2.setMaximumSize(QtCore.QSize(16777215, 131))
        self.frame_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_2.setContentsMargins(9, 9, 9, 9)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_4 = QtWidgets.QFrame(self.frame_2)
        self.frame_4.setMinimumSize(QtCore.QSize(0, 21))
        self.frame_4.setStyleSheet("background-color: rgb(45, 89, 99);\ncolor: rgb(196,237,239);")
        self.frame_4.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.frame_4)
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setStyleSheet("")
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.verticalLayout_2.addWidget(self.frame_4)
        self.frame_5 = QtWidgets.QFrame(self.frame_2)
        self.frame_5.setMinimumSize(QtCore.QSize(0, 21))
        self.frame_5.setStyleSheet("background-color: rgba(22, 185, 194, 65);\n"
"color: rgb(19, 58, 60);")
        self.frame_5.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.frame_5)
        self.label_2.setMaximumSize(QtCore.QSize(70, 16777215))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.lbl_name = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.lbl_name.setFont(font)
        self.lbl_name.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lbl_name.setObjectName("lbl_name")
        self.horizontalLayout_3.addWidget(self.lbl_name)
        self.line = QtWidgets.QFrame(self.frame_5)
        self.line.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setObjectName("line")
        self.horizontalLayout_3.addWidget(self.line)
        self.label_4 = QtWidgets.QLabel(self.frame_5)
        self.label_4.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background-color: rgba(255, 255, 255,0);")
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_3.addWidget(self.label_4)
        self.lbl_ID = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.lbl_ID.setFont(font)
        self.lbl_ID.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lbl_ID.setObjectName("lbl_ID")
        self.horizontalLayout_3.addWidget(self.lbl_ID)
        self.verticalLayout_2.addWidget(self.frame_5)
        self.frame_6 = QtWidgets.QFrame(self.frame_2)
        self.frame_6.setMinimumSize(QtCore.QSize(0, 21))
        self.frame_6.setStyleSheet("background-color: rgba(22, 185, 194, 65);\n"
"")
        self.frame_6.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_6)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.frame_8 = QtWidgets.QFrame(self.frame_6)
        self.frame_8.setStyleSheet("background-color: rgba(139, 178, 180,0);\n"
"color: rgb(19, 58, 60);")
        self.frame_8.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_8.setObjectName("frame_8")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_8)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(self.frame_8)
        self.label_3.setMaximumSize(QtCore.QSize(70, 16777215))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.lbl_edad = QtWidgets.QLabel(self.frame_8)
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.lbl_edad.setFont(font)
        self.lbl_edad.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lbl_edad.setObjectName("lbl_edad")
        self.horizontalLayout_4.addWidget(self.lbl_edad)
        self.line_2 = QtWidgets.QFrame(self.frame_8)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_4.addWidget(self.line_2)
        self.label_5 = QtWidgets.QLabel(self.frame_8)
        self.label_5.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_4.addWidget(self.label_5)
        self.lbl_sexo = QtWidgets.QLabel(self.frame_8)
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.lbl_sexo.setFont(font)
        self.lbl_sexo.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lbl_sexo.setObjectName("lbl_sexo")
        self.horizontalLayout_4.addWidget(self.lbl_sexo)
        self.horizontalLayout_5.addWidget(self.frame_8)
        self.verticalLayout_2.addWidget(self.frame_6)
        self.frame_7 = QtWidgets.QFrame(self.frame_2)
        self.frame_7.setMinimumSize(QtCore.QSize(0, 21))
        self.frame_7.setStyleSheet("background-color: rgba(22, 185, 194, 65);\n"
"color: rgb(19, 58, 60);\n"
"")
        self.frame_7.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_7.setObjectName("frame_7")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_7)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_6 = QtWidgets.QLabel(self.frame_7)
        self.label_6.setMaximumSize(QtCore.QSize(120, 16777215))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.label_6.setTextFormat(QtCore.Qt.AutoText)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_6.addWidget(self.label_6)
        self.lbl_antecedentes = QtWidgets.QLabel(self.frame_7)
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.lbl_antecedentes.setFont(font)
        self.lbl_antecedentes.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lbl_antecedentes.setFrameShadow(QtWidgets.QFrame.Plain)
        self.lbl_antecedentes.setObjectName("lbl_antecedentes")
        self.horizontalLayout_6.addWidget(self.lbl_antecedentes)
        self.verticalLayout_2.addWidget(self.frame_7)
        self.verticalLayout.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setMinimumSize(QtCore.QSize(600, 0))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.frame_3.setFont(font)
        self.frame_3.setStyleSheet("background-color: rgb(239, 239, 239);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_7.setContentsMargins(9, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.frame_10 = QtWidgets.QFrame(self.frame_3)
        self.frame_10.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_10)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setSpacing(9)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.frame_9 = QtWidgets.QFrame(self.frame_10)
        self.frame_9.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        self.frame_9.setFont(font)
        self.frame_9.setStyleSheet("color: rgb(19, 58, 60);")
        self.frame_9.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_9.setObjectName("frame_9")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_9)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 9)
        self.verticalLayout_3.setSpacing(6)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_7 = QtWidgets.QLabel(self.frame_9)
        self.label_7.setMinimumSize(QtCore.QSize(0, 30))
        self.label_7.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
"font: 11pt \"Tw Cen MT\";")
        self.label_7.setObjectName("label_7")
        self.verticalLayout_3.addWidget(self.label_7)
        self.textEdit_historiaclinica = QtWidgets.QTextEdit(self.frame_9)
        font = QtGui.QFont()
        font.setFamily("Candara Light")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.textEdit_historiaclinica.setFont(font)
        self.textEdit_historiaclinica.setStyleSheet("background-color: rgba(22, 185, 194, 65);\n"
"font: 10pt \"Candara Light\";\n"
"color: rgb(0,20,20);")
        self.textEdit_historiaclinica.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.textEdit_historiaclinica.setFrameShadow(QtWidgets.QFrame.Plain)
        self.textEdit_historiaclinica.setObjectName("textEdit_historiaclinica")
        self.verticalLayout_3.addWidget(self.textEdit_historiaclinica)
        self.label_8 = QtWidgets.QLabel(self.frame_9)
        self.label_8.setMinimumSize(QtCore.QSize(0, 30))
        self.label_8.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
"font: 11pt \"Tw Cen MT\";")
        self.label_8.setObjectName("label_8")
        self.verticalLayout_3.addWidget(self.label_8)
        self.textEdit_semiologia = QtWidgets.QTextEdit(self.frame_9)
        font = QtGui.QFont()
        font.setFamily("Candara Light")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.textEdit_semiologia.setFont(font)
        self.textEdit_semiologia.setStyleSheet("background-color: rgba(22, 185, 194, 65);\n"
"font: 10pt \"Candara Light\";\n"
"color: rgb(0,20,20);")
        self.textEdit_semiologia.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.textEdit_semiologia.setFrameShadow(QtWidgets.QFrame.Plain)
        self.textEdit_semiologia.setObjectName("textEdit_semiologia")
        self.verticalLayout_3.addWidget(self.textEdit_semiologia)
        self.btn_save = QtWidgets.QPushButton(self.frame_9)
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.btn_save.setFont(font)
        self.btn_save.setStyleSheet("QPushButton{\n"
"    background-color: rgb(45, 89, 99);\n"
"    color: rgb(196, 237, 239);\n"
"    border-radius: 0px;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgba(22, 185, 194, 65);\n"
"    color: rgb(45, 89, 99);\n"
"}")
        self.btn_save.setFlat(True)
        self.btn_save.setObjectName("btn_save")
        self.verticalLayout_3.addWidget(self.btn_save)
        self.horizontalLayout_8.addWidget(self.frame_9)
        self.frame_11 = QtWidgets.QFrame(self.frame_10)
        self.frame_11.setStyleSheet("background-color: rgb(220, 220, 220);")
        self.frame_11.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_11.setObjectName("frame_11")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_11)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.frame_14 = QtWidgets.QFrame(self.frame_11)
        self.frame_14.setMinimumSize(QtCore.QSize(0, 30))
        self.frame_14.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_14.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_14.setObjectName("frame_14")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame_14)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.frame_15 = QtWidgets.QFrame(self.frame_14)
        self.frame_15.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_15.setStyleSheet("")
        self.frame_15.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_15.setObjectName("frame_15")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frame_15)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setSpacing(0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.btn_lineadetiempo = QtWidgets.QPushButton(self.frame_15)
        self.btn_lineadetiempo.setMinimumSize(QtCore.QSize(0, 30))
        self.btn_lineadetiempo.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.btn_lineadetiempo.setFont(font)
        self.btn_lineadetiempo.setStyleSheet("QPushButton{\n"
"    border-radius: 0px;\n"
"}\n"
"QPushButton:hover{\n"
"    \n"
"    background-color: rgb(247, 221, 114);\n"
"}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/timeicn.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_lineadetiempo.setIcon(icon)
        self.btn_lineadetiempo.setIconSize(QtCore.QSize(25, 25))
        self.btn_lineadetiempo.setFlat(True)
        self.btn_lineadetiempo.setObjectName("btn_lineadetiempo")
        self.horizontalLayout_10.addWidget(self.btn_lineadetiempo)
        self.horizontalLayout_9.addWidget(self.frame_15)
        self.frame_16 = QtWidgets.QFrame(self.frame_14)
        self.frame_16.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_16.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_16.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_16.setObjectName("frame_16")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.frame_16)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setSpacing(0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.line_3 = QtWidgets.QFrame(self.frame_16)
        self.line_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.line_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setObjectName("line_3")
        self.horizontalLayout_11.addWidget(self.line_3)
        self.btn_trazabilidad = QtWidgets.QPushButton(self.frame_16)
        self.btn_trazabilidad.setMinimumSize(QtCore.QSize(0, 30))
        self.btn_trazabilidad.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(11)
        self.btn_trazabilidad.setFont(font)
        self.btn_trazabilidad.setStyleSheet("QPushButton{\n"
"    border-radius: 0px;\n"
"}\n"
"QPushButton:hover{\n"
"    \n"
"    background-color: rgb(247, 221, 114);\n"
"}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/traceicn.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_trazabilidad.setIcon(icon1)
        self.btn_trazabilidad.setIconSize(QtCore.QSize(25, 25))
        self.btn_trazabilidad.setFlat(True)
        self.btn_trazabilidad.setObjectName("btn_trazabilidad")
        self.horizontalLayout_11.addWidget(self.btn_trazabilidad)
        self.horizontalLayout_9.addWidget(self.frame_16)
        self.verticalLayout_4.addWidget(self.frame_14)
        self.frame_13 = QtWidgets.QFrame(self.frame_11)
        self.frame_13.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_13.setObjectName("frame_13")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.frame_13)
        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_12.setSpacing(0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame_13)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.page)
        self.horizontalLayout_16.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_16.setSpacing(0)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.frame_18 = QtWidgets.QFrame(self.page)
        self.frame_18.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_18.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_18.setObjectName("frame_18")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_18)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.comboBox_trazabilidad = QtWidgets.QComboBox(self.frame_18)
        self.comboBox_trazabilidad.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 25 11pt \"Corbel Light\";\n"
"color: rgb(0, 0, 0);")
        self.comboBox_trazabilidad.setFrame(False)
        self.comboBox_trazabilidad.setObjectName("comboBox_trazabilidad")
        self.comboBox_trazabilidad.addItem("")
        self.comboBox_trazabilidad.addItem("")
        self.comboBox_trazabilidad.addItem("")
        self.comboBox_trazabilidad.addItem("")
        self.comboBox_trazabilidad.addItem("")
        self.comboBox_trazabilidad.addItem("")
        self.comboBox_trazabilidad.addItem("")
        self.comboBox_trazabilidad.addItem("")
        self.comboBox_trazabilidad.addItem("")
        self.comboBox_trazabilidad.addItem("")
        self.verticalLayout_5.addWidget(self.comboBox_trazabilidad)
        self.frame_19 = QtWidgets.QFrame(self.frame_18)
        self.frame_19.setStyleSheet("")
        self.frame_19.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_19.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_19.setObjectName("frame_19")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame_19)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.frame_19)
        self.scrollArea_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 655, 377))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        #self.frame_trazabilidad = QtWidgets.QFrame(self.scrollAreaWidgetContents_2)
        #self.frame_trazabilidad.setFrameShape(QtWidgets.QFrame.NoFrame)
        #self.frame_trazabilidad.setFrameShadow(QtWidgets.QFrame.Plain)
        #self.frame_trazabilidad.setObjectName("frame_trazabilidad")
        #self.verticalLayout_7.addWidget(self.frame_trazabilidad)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.verticalLayout_6.addWidget(self.scrollArea_2)
        self.verticalLayout_5.addWidget(self.frame_19)
        self.horizontalLayout_16.addWidget(self.frame_18)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.page_2)
        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_13.setSpacing(0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.frame_12 = QtWidgets.QFrame(self.page_2)
        self.frame_12.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_12.setObjectName("frame_12")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.frame_12)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.tableWidget_lineadetiempo = QtWidgets.QTableWidget(self.frame_12)
        self.tableWidget_lineadetiempo.setMaximumSize(QtCore.QSize(250, 16777215))
        font = QtGui.QFont()
        font.setFamily("Corbel Light")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(3)
        self.tableWidget_lineadetiempo.setFont(font)
        self.tableWidget_lineadetiempo.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 25 11pt \"Corbel Light\";")
        self.tableWidget_lineadetiempo.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.tableWidget_lineadetiempo.setFrameShadow(QtWidgets.QFrame.Plain)
        self.tableWidget_lineadetiempo.setObjectName("tableWidget_lineadetiempo")
        self.tableWidget_lineadetiempo.setColumnCount(2)
        self.tableWidget_lineadetiempo.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_lineadetiempo.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_lineadetiempo.setHorizontalHeaderItem(1, item)
        self.horizontalLayout_14.addWidget(self.tableWidget_lineadetiempo)
        #self.scrollArea = QtWidgets.QScrollArea(self.frame_12)
        #self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        #self.scrollArea.setFrameShadow(QtWidgets.QFrame.Plain)
        #self.scrollArea.setWidgetResizable(True)
        #self.scrollArea.setObjectName("scrollArea")
        #self.scrollAreaWidgetContents = QtWidgets.QWidget()
        #self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 21, 16))
        #self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        #self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        #self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        #self.horizontalLayout_15.setSpacing(0)
        #self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.frame_lineadetiempo = QtWidgets.QFrame(self.frame_12)
        self.frame_lineadetiempo.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_lineadetiempo.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_lineadetiempo.setObjectName("frame_lineadetiempo")
        self.verticalLayout12 = QtWidgets.QVBoxLayout(self.frame_lineadetiempo)
        self.verticalLayout12.setContentsMargins(0,0,0,0)
        self.verticalLayout12.setSpacing(2)
        self.verticalLayout12.setObjectName('vertical_laylout12')
        self.box = QtWidgets.QTextBrowser(self.frame_lineadetiempo)
        self.box.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.box.setFrameShadow(QtWidgets.QFrame.Plain)
        self.box.setMaximumSize(10000,10000)
        #self.box.setMinimumSize(270,250)
        self.frame_gr = QtWidgets.QScrollArea(self.frame_lineadetiempo)
        self.frame_gr.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_gr.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_gr.setWidgetResizable(True)
        #self.widget_gr = QtWidgets.QWidget()
        #self.widget_gr.setFrameShape(QtWidgets.QFrame.NoFrame)
        #self.widget_gr.setFrameShadow(QtWidgets.QFrame.Plain)
        #self.layoutgr = QtWidgets.QVBoxLayout(self.widget_gr)
        #self.layoutgr.setContentsMargins(0,0,0,0)
        #self.frame_gr.setWidget(self.widget_gr)
        #self.layoutgr.setSpacing(1)
        
        self.verticalLayout12.addWidget(self.box)
        self.verticalLayout12.addWidget(self.frame_gr)
        #self.horizontalLayout_15.addWidget(self.frame_lineadetiempo)
        #self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.horizontalLayout_14.addWidget(self.frame_lineadetiempo)
        self.horizontalLayout_13.addWidget(self.frame_12)
        self.stackedWidget.addWidget(self.page_2)
        self.horizontalLayout_12.addWidget(self.stackedWidget)
        self.verticalLayout_4.addWidget(self.frame_13)
        self.horizontalLayout_8.addWidget(self.frame_11)
        self.horizontalLayout_7.addWidget(self.frame_10)
        self.verticalLayout.addWidget(self.frame_3)
        self.verticalLayout_8.addWidget(self.frame)
        #self.scrollArea = QtWidgets.QScrollArea(self.frame_lineadetiempo)
        #self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        #self.scrollArea.setFrameShadow(QtWidgets.QFrame.Plain)
        #self.scrollArea.setWidgetResizable(True)
        #self.scrollArea.setObjectName("scrollArea")
        #self.textEdit_timeline = QtWidgets.QTextBrowser(self.frame_lineadetiempo)
        #self.textEdit_timeline.setFrameShape(QtWidgets.QFrame.NoFrame)
        #self.textEdit_timeline.setFrameShadow(QtWidgets.QFrame.Plain)
        #self.textEdit_timeline.setObjectName("textEdit_timeline")
        #self.textEdit_timeline.setReadOnly(True)
        #self.webbrowser = QtWebEngineWidgets.QWebEngineView(self.frame_lineadetiempo)
        #self.webbrowser.setObjectName("webbrowser")
        #quitar esto e intentar crear en cada update, el layout y los labels y dem√°s cosas
        #self.verticalLayout_9.addWidget(self.textEdit_timeline)
        #self.verticalLayout_9.addWidget(self.webbrowser)
        #self.saWidget = QtWidgets.QWidget()
        #self.saWidget .setObjectName("saWidget ")
        #self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.saWidget)
        #self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        #self.verticalLayout_9.setSpacing(0)
        #self.verticalLayout_9.setObjectName("verticalLayout_9")
        #self.labl = QtWidgets.QLabel(self.saWidget)
        #self.labl.setObjectName("labl")
        #self.verticalLayout_9.addWidget(self.labl)
        #self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.saWidget)
        #self.verticalLayout_19.setContentsMargins(0, 0, 0, 0)
        #self.verticalLayout_19.setSpacing(0)
        #self.verticalLayout_19.setObjectName("verticalLayout_19")
        #self.labl = QtWidgets.QLabel(self.saWidget)
        #self.labl.setObjectName("labl")
        #labl.setText(date)
        #self.scrollArea.setWidget(saWidget)
        self.btn_lineadetiempo.clicked.connect(lambda:self.tolineadetiempo())
        self.btn_trazabilidad.clicked.connect(lambda:self.totrazabilidad())
        self.btn_save.clicked.connect(lambda:self.savecambios())
        self.tableWidget_lineadetiempo.itemSelectionChanged.connect(lambda:self.updt_timeline())
        self.comboBox_trazabilidad.currentIndexChanged.connect(lambda:self.trace())
        self.retranslateUi(Dialog)
        self.fill()
        self.stackedWidget.setCurrentIndex(1)
        pg.setConfigOptions(antialias=True)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def trace(self):
        # obtiene datos para la trazabilidad

        #Se obtiene del combobox lo que se va a hacer de trazabilidad 
        opt = self.comboBox_trazabilidad.currentText()

        if opt=='Signos Vitales':
            #se obtienen los eventos que corresponden
            objs = [k for k in self.pat['eventos'] if k['med']=='VS']

            # se extraen las fechas y se convierten a dias para hacer el eje x de todas las gtr√°ficas
            dates = [k['fecha'] for k in objs]
            dates = [strtodate(k) for k in dates]

            d = [[j['datos'][k] for j in objs] for k in objs[0]['datos']]
            t = [k.replace('.','(')+')'  for k in objs[0]['datos']]
            [d[k].insert(0,t[k]) for k in range(0,len(d))]
            dates.insert(0,'Fechas')
            print(dates)
            d.insert(0,dates)
            #en d hay una tabla que la primera columna son todas las caracter√≠sticas que se les hace trazabilidad
            # y las dem√°s columnas son cada fecha y el valor de la caracter√≠stica

            self.updt_trazabilidad(d)
        if opt in 'ECG,RESP,EDA,TEMP,PPG,EMG':
            # este es para hacer la trazabilidad de las caracter√≠sticas de una se√±al

            #falta que se calcule una √∫nica caracter√≠stica por fecha mas no por segmento
            objs = [k for k in self.pat['eventos'] if k['med']==opt]
            dates = [k['fecha'] for k in objs]
            d = [[j['datos']['extr'][k] for j in objs] for k in objs[0]['datos']['extr']]
            t = [k.replace('$',' ').replace('.','(')+')'  for k in objs[0]['datos']['extr']]
            [d[k].insert(0,t[k]) for k in range(0,len(d))]
            dates.insert(0,'Fechas')
            d.insert(0,dates)
            d.insert(0,dates)
            self.updt_trazabilidad(d)
        if opt=='Pruebas Psicol√≥gicas':

            #desarrollar trazabilidad para pruebas psicol√≥gicas
            objs = [k for k in self.pat['eventos'] if k['med']in'MRC,EEP,FSS,SF-36,BDI,BAI,FCSRT,DIGIT,TOL,STROOP']
            dates = [k['fecha'] for k in objs]
            #d = [[j['datos']['extr'][k] for j in objs] for k in objs[0]['datos']['extr']]
    def updt_trazabilidad(self,tbl):
        # se llena la pesta√±a de trazabilidad con la tabla

        # se crea un html para que la tabla muestre todos los datos 
        html = '<!DOCTYPE html><html><body><table style="width:100%;font:10px\'Tahoma\';color: #808080; border-collapse: collapse">$</table></body></html>'
        for k in range(0,len(tbl)):
            if k==0:
                html = html.replace('$','<tr>$</tr>')
                for j in tbl[k]:
                    html = html.replace('$','<th>'+str(j)+'</th>$')
            else:
                html = html.replace('$','<tr>$</tr>')
                for j in tbl[k]:
                    html = html.replace('$','<th>'+str(j)+'</th>$')
            html.replace('$</tr>','</tr>$')
        html = html.replace('$','')
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 655, 377))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.scrollAreaWidgetContents_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        tablev = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_2)
        tablev.setFrameShape(QtWidgets.QFrame.NoFrame)
        tablev.setFrameShadow(QtWidgets.QFrame.Plain)
        tablev.setMaximumSize(10000,10000)
        tablev.setHtml(html)
        self.verticalLayout_7.addWidget(tablev)
        
        #se crea el eje x para todas las gr√°ficas
        x = datetoday(tbl[0][1:])
    
        print('x',x)
        for k in tbl[1:]:
            # en este ciclo se crea cada gr√°fica por caracter√≠stica

            print(k)
            pen = pg.mkPen(color="12697a", width=1.1)
            grph = pg.PlotWidget(background='w')
            frame = QtWidgets.QFrame()
            frame.setFrameShape(QtWidgets.QFrame.NoFrame)
            frame.setFrameShadow(QtWidgets.QFrame.Plain)
            frame.setStyleSheet('background-color: rgb(255, 255, 255);')
            frame.setMinimumSize(0,200)
            frame.setMaximumSize(10000,200)
            layout = QtWidgets.QVBoxLayout(frame)
            layout.setContentsMargins(0, 0, 0, 0)
            layout.setSpacing(0)
            grph.showGrid(x=True,y=True,alpha=0.4)
            grph.plot(x,y=k[1:],pen=pen)
            grph.setLabel('left',k[0])
            grph.setLabel('bottom','tiempo(dias)')
            layout.addWidget(grph)
            self.verticalLayout_7.addWidget(frame)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)


    def updt_timeline(self,exc=False):
        # se actualiza la pesta√±a de linea de tiempo 
        a = self.tableWidget_lineadetiempo.selectedIndexes()
        try:
            if exc:
                raise IndexError            
            row = a[0].row()
            self.date1 = strtodate(self.tableWidget_lineadetiempo.item(row,0).text(),f=True)
            print(self.date1)
            self.pop_sa()
       
        except IndexError:
            
            self.box.setHtml('')
            self.box.setText('Seleccione una fecha para observar las medidas')
            
            pass

    def pop_sa(self):
        # Se crea el html para mostrar cada prueba 
        html = '<!DOCTYPE html><html><body style="background-color:rgb(255,255,255);"><div style="font:27px\'Tw Cen MT\';color: #1fc4c4;">'+self.date1+'</div><div style="line-height:0.1,font:20px\'Tw Cen MT\'"></div>$</body></html>'
        self.widget_gr = QtWidgets.QWidget()
        self.layoutgr = QtWidgets.QVBoxLayout(self.widget_gr)
        self.layoutgr.setContentsMargins(0,0,0,0)
        self.frame_gr.setWidget(self.widget_gr)
        self.layoutgr.setSpacing(1)
        for o in self.pat['eventos']:
        #por cada evento se extraen los valores y en el vector scv se van guardando como lineas de texto

            if strtodate(o['fecha'],f=True)==self.date1:
                #condicional para tomar s√≥lo los eventos que correspondan a la fecha seleccionada

                if o['med'] in 'FCSRT,DIGIT,STROOP,TOL':
                    #si el evento es prueba neuropsicol√≥gica
                    medida = tagtodesc(o['med'],'Descr')
                    evaluador = o['ev']
                    scv = [tagtodesc(o['med'],k)+': '+str(o['datos'][k]) for k in o['datos']]

                    print(scv)
                    event = 0
                    for o2 in self.pat['eventos']:
                        # en este ciclo se adicionan las caracrer√≠sticas de adquisici√≥n que correspondan a la prueba psicol√≥gica
                        event = event+1
                        print(event)
                        if 'tag' in o2.keys() and strtodate(o2['fecha'],f=True)==strtodate(o['fecha'],f=True):
                            # si el evento tiene tag, y ocurre en la misma fecha 
                            print('entra al if',event)
                            if o2['tag']==o['med']:
                                # si coincide tag con prueba neuropsicologica
                                scv.append('<b>'+o2['med']+'</b>')
                                
                                # se le crea un nuevo campo "Plotted" para que no se muestre dos veces
                                o2['plotted']=True

                                v2=[]

                                for k in o2['datos']['extr']:
                                    #se agrega cada caracter√≠stica al html
                                    if '$' in k:
                                        v2.append(k.split('$')[0]+" "+tagtodesc('ACQ',k.split('$')[1].split('.')[0])+": "+str(o2['datos']['extr'][k])+k.split('.')[1])
                                    elif '.' in k:
                                        v2.append(k.split('.')[0]+": "+str(o2['datos']['extr'][k])+k.split('.')[1])
                                    else:
                                        v2.append(k+": "+str(o2['datos']['extr'][k]))
                                #v2 = [k.split('$')[0]+tagtodesc('ACQ',k.split('$')[1].split('.')[0])+': '+str(o2['datos'][k])+k.split('.')[1] if '$' in k else k.split('.')[0]+': '+str(o2['datos'][k])+k.split('.')[1] for k in o2['datos']]
                                [scv.append(k) for k in v2]
                    sc = '<br>'.join(scv)
                    html = html.replace('$','<div style="line-height:1;font:20px\'Tw Cen MT\';color: #f09618;">'+str(medida)+'</div><hr><div style="line-height:1;font:14px\'Tahoma\';color: #808080;"><b>Evaluador: '+evaluador+'</b><br>'+sc+'<br></div><br></br>$')
                    
                elif o['med'] in 'ECG,PPG,EDA,EMG,TEMP,RESP,fNIRS':
                    #se crean las gr√°ficas para cada se√±al
                    j = [self.layoutgr.addWidget(k) for k in self.lbl_graph(o)]
                else:
                    #Se agregan dem√°s pruebas y lecturas de signos vitales 
                    medida = tagtodesc(o['med'],'Descr')
                    evaluador = o['ev']
                    scv = []
                    print('o["datos"]',o['datos'])
                    for k in o['datos']:
                        if '.' in k:
                            scv.append(tagtodesc(o['med'],k.split('.')[0])+': '+str(o['datos'][k])+k.split('.')[-1])
                        else:
                            scv.append(tagtodesc(o['med'],k)+': '+str(o['datos'][k]))
                    print('pasa el for loop')
                    sc = '<br>'.join(scv)
                    html = html.replace('$','<div style="line-height:1;font:20px\'Tw Cen MT\';color: #f09618;">'+str(medida)+'</div><hr><div style="line-height:1;font:14px\'Tahoma\';color: #808080;"><b>Evaluador: '+evaluador+'</b><br>'+sc+'<br></div><br></br>$')
        for o in self.pat['eventos']:
            #se agregan caracter√≠sticas de las se√±ales en caso que no correspondan con ninguna pruebaq neuropsicol√≥gica
            if strtodate(o['fecha'],f=True)==strtodate(self.date1,f=True):
                if o['med'] in 'ECG,PPG,EDA,EMG,TEMP,RESP,fNIRS':
                    if 'plotted' not in o.keys():
                        print('entra al if plotted')
                        medida = o['med']+'('+o['tag']+')' if o['tag'] != '' else o['med']
                        scv=[]
                        for k in o['datos']['extr']:
                            if '$' in k:
                                scv.append(k.split('$')[0]+" "+tagtodesc('ACQ',k.split('$')[1].split('.')[0])+": "+str(o['datos']['extr'][k])+k.split('.')[1])
                            elif '.' in k:
                                scv.append(k.split('.')[0]+": "+str(o['datos']['extr'][k])+k.split('.')[1])
                            else:
                                scv.append(k+": "+str(o['datos']['extr'][k]))
                        print('scv',scv)
                        sc = '<br>'.join(scv)
                        html = html.replace('$','<div style="line-height:1;font:20px\'Tw Cen MT\';color: #f09618;">'+str(medida)+'</div><hr><div style="line-height:1;font:14px\'Tahoma\';color: #808080;">'+sc+'<br></div><br></br>$')
                        print(html)
                    #j = [self.layoutgr.addWidget(k) for k in self.lbl_graph(o)]       
        #print(html)
        self.frame_gr.setWidget(self.widget_gr)
        self.box.setHtml(html.replace('$',''))

    def lbl_graph(self,o):
        # se crea una gr√°fica por cada se√±al
        a = []
        for k in o['datos']:
            if '~' in k:
                y = o['datos'][k]['signal']
                if 'fs' in o['datos'][k].keys():
                    x = 1/(o['datos'][k]['fs'])*(np.arange(len(y)))
                else:
                    x = o['datos'][k]['t']
                xlbl = 'tiempo(s)'
                if 'filt' in k:
                    ylbl = o['med']+o['datos'][k]['unid']
                    title = o['med']+" "+o['tag']
                else:
                    ylbl = k.replace('~','').replace('@','')+o['datos'][k]['unid']
                    title = o['med']+" "+k.replace('~','').replace('@','')+" "+o['tag']
                pen = pg.mkPen(color="#12697a", width=1.1)
                grph = pg.PlotWidget(background='w')
                frame = QtWidgets.QFrame()
                frame.setFrameShape(QtWidgets.QFrame.NoFrame)
                frame.setFrameShadow(QtWidgets.QFrame.Plain)
                frame.setStyleSheet('background-color: rgb(255, 255, 255);')
                frame.setMinimumSize(0,200)
                frame.setMaximumSize(10000,200)
                layout = QtWidgets.QVBoxLayout(frame)
                layout.setContentsMargins(0, 0, 0, 0)
                layout.setSpacing(0)
                grph.showGrid(x=True,y=True,alpha=0.4)
                grph.plot(x,y,pen=pen)
                grph.setLabel('left',ylbl)
                grph.setLabel('bottom',xlbl)
                grph.setTitle(title)
                grph.setXRange(0,30)
                layout.addWidget(grph)
                a.append(frame)
        print(len(a))
        return a
                
    def obj_tolbl(self,objs):
        #esta funcion no se usa
        objs = [k for k in objs if k['fecha']==self.date1]
        a = []
        a.append(self.create_lbl(t=objs[0]['fecha']+'@t'))
        for o in objs:
            # si es prueba neuropsicol√≥gica, buscar y relacionar con se√±ales
            if o['med'] in 'FCSRT,DIGIT,STROOP,TOL':
                a.append(self.create_lbl(t=tagtodesc(o['med'],'Descr')+'@s'))
                a.append(self.create_lbl(t="Evaluador: "+o['ev']+"@n"))
                [a.append(self.chlbl(k,o['datos'][k],o['med'])) for k in o['datos']]
                for o2 in objs:
                    if 'tag' in o2.keys():
                        if o2['tag']==o['med']:
                            a.append(self.chlbl('~',o2,o2['med']))
                            o2['plotted']=True
            else:
                if 'tag' in o.keys():
                    if 'plotted' not in o.keys():
                        a.append(self.create_lbl(t=o['med']+'@s'))
                        #cambi√© o['med'] por 'tag'
                        [a.append(self.chlbl(k,o['datos'][k],o['med'],tag=o['tag'])) for k in o['datos']]
                else:
                    a.append(self.create_lbl(t=tagtodesc(o['med'],'Descr')+'@s'))
                    a.append(self.create_lbl(t="Evaluador: "+o['ev']+"@n"))
                    [a.append(self.chlbl(k,o['datos'][k],o['med'])) for k in o['datos']]
        a.append(self.create_lbl(st=True))
        return a 
                
    def chlbl(self,k,c,med,b=True,tag=''):
        #esta funci√≥n no se usa
        r = []
        if type(c)==type(0.0) or type(c)==type(0) or type(c)==type(""):
            print('c',c,', k',k,', med',med)
            try:
                if b:
                    r.append(self.create_lbl(t=tagtodesc(med,k.split('.')[0])+": "+str(c)+" "+str(k.split('.')[1])+"@n"))                
                else:
                    r.append(self.create_lbl(t=str(k.split('.')[0])+": "+str(c)+" "+str(k.split('.')[1])+"@n"))                
            except IndexError:
                if b:
                    r.append(self.create_lbl(t=tagtodesc(med,k.split('.')[0])+": "+str(c)+"@n"))                
                else:
                    r.append(self.create_lbl(t=str(k.split('.')[0])+": "+str(c)+" "+str(k.split('.')[1])+"@n"))                
        elif '~' in k:
            y = c['signal']
            #el key tiene ~filt o es ~PH o ~T
            if "fs" in c.keys():
                x = 1/(c['fs'])*(np.arange(len(y)))
            else:
                x = c['t']
            if 'filt' in k:
                ylbl=med+c['unid']
                xlbl='tiempo(s)'
            else:
                ylbl = k.replace('~','').replace('@','')+str(c['unid'])
                xlbl = 'tiempo(s)'
            tx=tag
            r.append(self.create_lbl(t=tx+"@ss",g=True,x=x,y=y,xlbl=xlbl,ylbl=ylbl))
            print(len(r))
        elif 'extr' in k:
            for j in c:
                if '$' in j:
                    t = j.split('$')[0]+tagtodesc('ACQ',j.split('$')[1].split('.')[0])+": "+str(c[j])+j.split('.')[1]+'@n'
                else:
                    t = j.split('.')[0]+": "+str(c[j])+j.split('.')[1]+'@n'
                r.append(self.create_lbl(t=t))
            return r
        else:
            r = []
        print("sale del condicional")
        return r

    def lblf2(self,j,c):
        #esta funcion no se usa
        print('entro ac√° 123')
        if '$' in j:
            d = tagtodesc('ACQ',j.split('$')[1].split('.')[0])
        else:
            d=''
        lb = self.create_lbl(t=j.replace('$','').split('.')[0]+d+": "+str(c)+j.split('.')[1]+"@n") 
        return lb
    
    def create_lbl(self,t='@',g=False,x=[0,1],y=[0,1],xlbl="xlbl",ylbl="ylbl",st=False):
        #esta funci√≥n no se usa
        if st:
            lbl = QtWidgets.QLabel()
            lbl.setFrameShape(QtWidgets.QFrame.NoFrame)
            lbl.setFrameShadow(QtWidgets.QFrame.Plain)           
            lbl.setMaximumHeight(800)
            lbl.setMinimumHeight(800)
            lbl.setText('')
            return lbl
        else:
            print('txt',t)
            a = []
            lbl = QtWidgets.QLabel()
            lbl.setFrameShape(QtWidgets.QFrame.NoFrame)
            lbl.setFrameShadow(QtWidgets.QFrame.Plain)
            lbl.setText(t.split('@')[0])
            if t.split('@')[1]=='t':
                lbl.setStyleSheet('font: 20pt "Tw Cen MT"; color:rgba(22, 185, 194, 128);')
                lbl.setMaximumHeight(40)
                lbl.setMinimumHeight(40)
                a.append(lbl)
            elif t.split('@')[1]=='s':
                lbl.setStyleSheet('font: 15pt "Tw Cen MT"; color:rgb(255, 152, 25);')
                lbl.setMaximumHeight(15)
                lbl.setMinimumHeight(15)
                line = QtWidgets.QFrame()
                line.setStyleSheet("color: rgb(128, 128, 128);")
                line.setFrameShadow(QtWidgets.QFrame.Plain)
                line.setFrameShape(QtWidgets.QFrame.HLine)
                a.append(lbl)
                a.append(line)
            elif t.split('@')[1]=='ss':
                lbl.setStyleSheet('font: 75 10pt "Verdana"; color:rgb(128,128,128);')
                lbl.setMaximumHeight(15)
                lbl.setMinimumHeight(15)
                a.append(lbl)  
            else:
                lbl.setStyleSheet('font: 10pt "Verdana"; color:rgb(128,128,128);')
                lbl.setMaximumHeight(15*(len(t.split('@')[1].split('\n'))))
                lbl.setMinimumHeight(15*(len(t.split('@')[1].split('\n'))))
                a.append(lbl)
            if g:
                pen = pg.mkPen(color="#59CAC2", width=1.1)
                grph = pg.PlotWidget(background='w')
                frame = QtWidgets.QFrame()
                frame.setFrameShape(QtWidgets.QFrame.NoFrame)
                frame.setFrameShadow(QtWidgets.QFrame.Plain)
                frame.setStyleSheet('background-color: rgb(255, 255, 255);')
                frame.setMinimumSize(0,100)
                frame.setMaximumSize(10000,130)
                layout = QtWidgets.QVBoxLayout(frame)
                layout.setContentsMargins(0, 0, 0, 0)
                layout.setSpacing(0)
                grph.showGrid(x=True,y=True,alpha=0.4)
                grph.plot(x,y,pen=pen)
                grph.setLabel('left',ylbl)
                grph.setLabel('bottom',xlbl)
                grph.setXRange(0,30)
                layout.addWidget(grph)
                a.append(frame)
                #para poner graficas 
        return a

    def fill(self):
        #llena la linea de tiempo
        if self.pat['eventos']==[]:
            # no hay medidas sobreel paciente
            self.box.setText("No hay datos para mostrar en este paciente")

        else:
            dates = []
            [dates.append(strtodate(k['fecha'],f=True)) for k in self.pat['eventos'] if strtodate(k['fecha'],f=True) not in dates]
            medidas = [remove_dup(k) for k in [[obj['med'] for obj in self.pat['eventos'] if strtodate(obj['fecha'],f=True)==d] for d in dates]]
            medstr = [', '.join(k) for k in medidas]
            medstr = [k.replace('VS','Signos vitales') for k in medstr]
            self.tableWidget_lineadetiempo.setRowCount(len(dates))
            [self.tableWidget_lineadetiempo.setItem(k,0,QtWidgets.QTableWidgetItem(dates[k])) for k in range (0, len(dates))]
            [self.tableWidget_lineadetiempo.setItem(k,1,QtWidgets.QTableWidgetItem(medstr[k])) for k in range (0, len(medstr))]        
            self.tableWidget_lineadetiempo.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            #self.textEdit_timeline.setText("Seleccione una fecha para observar las medidas.")          
            #terminar el html para que se ponga por medidas, y se relacione la adquisici√≥n seg√∫n los tags
            self.updt_timeline(exc=True)
            #calcular y llenar trazabilidad de cada caracter√≠stica

    def savecambios(self):
        #guarda los cambios hechos en la historia cl√≠nica y en la semiolog√≠a
        his = self.textEdit_historiaclinica.toPlainText()
        sem = self.textEdit_semiologia.toPlainText()
        edit_patdat(self.idn,'historia_clinica',his)
        edit_patdat(self.idn,'semiologia',sem)
        self.showdialog([166, 64],icon="‚úîÔ∏è",msg="Cambios guardados")

    def tolineadetiempo(self):
        #lleva a la pesta√±a de linea de tiempo
        self.stackedWidget.setCurrentIndex(1)
        print('lineadetiempo')

    def totrazabilidad(self):
        #lleva a la pesta√±a de trazabilidad
        self.stackedWidget.setCurrentIndex(0)
        print('trazabilidad')

    def showdialog(self,size,icon="‚ÑπÔ∏è",msg="",toast=True):
        #muestra un cuadro de di√°logo
        dlog = QtWidgets.QDialog()
        uidlog = dlg2.Ui_Dialog()
        uidlog.setupUi(dlog,icon,msg,toast,size)
        if toast:
            dlog.exec()
        else:
            dlog.exec()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Reporte"))
        self.textEdit_historiaclinica.setText(_translate("Dialog", self.pat['historia_clinica']))
        self.textEdit_semiologia.setText(_translate("Dialog", self.pat['semiologia']))
        self.label.setText(_translate("Dialog", "   Paciente"))
        self.label_2.setText(_translate("Dialog", "   Nombre :"))
        self.lbl_name.setText(_translate("Dialog", self.pat['nombre']))
        self.label_4.setText(_translate("Dialog", "   ID :"))
        self.lbl_ID.setText(_translate("Dialog", self.idn))
        self.label_3.setText(_translate("Dialog", "   Edad :"))
        self.lbl_edad.setText(_translate("Dialog", str(calculateAge(date(int(self.pat['f_nacimiento'].split('/')[2]),int(self.pat['f_nacimiento'].split('/')[1]),int(self.pat['f_nacimiento'].split('/')[0]))))))
        self.label_5.setText(_translate("Dialog", "   Sexo :"))
        self.lbl_sexo.setText(_translate("Dialog", self.pat['sexo']))
        self.label_6.setText(_translate("Dialog", "   Antecedentes :"))
        self.lbl_antecedentes.setText(_translate("Dialog", self.pat['antecedentes']))
        self.label_7.setText(_translate("Dialog", "Historia cl√≠nica"))
        #self.textEdit_historiaclinica.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
        #"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
        #"p, li { white-space: pre-wrap; }\n"g
        #"</style></head><body style=\" font-family:\'Candara Light\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
        #"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_8.setText(_translate("Dialog", "Semiolog√≠a"))
        #self.textEdit_semiologia.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
        #"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
        #"p, li { white-space: pre-wrap; }\n"
        #"</style></head><body style=\" font-family:\'Candara Light\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
        #"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.btn_save.setText(_translate("Dialog", "Guardar Cambios"))
        self.btn_lineadetiempo.setText(_translate("Dialog", "L√≠nea de Tiempo"))
        self.btn_trazabilidad.setText(_translate("Dialog", "Trazabilidad"))
        self.comboBox_trazabilidad.setItemText(0, _translate("Dialog", "Seleccionar..."))
        self.comboBox_trazabilidad.setItemText(1, _translate("Dialog", "Signos Vitales"))
        self.comboBox_trazabilidad.setItemText(2, _translate("Dialog", "ECG"))
        self.comboBox_trazabilidad.setItemText(3, _translate("Dialog", "RESP"))
        self.comboBox_trazabilidad.setItemText(4, _translate("Dialog", "EDA"))
        self.comboBox_trazabilidad.setItemText(5, _translate("Dialog", "TEMP"))
        self.comboBox_trazabilidad.setItemText(6, _translate("Dialog", "fNIRS"))
        self.comboBox_trazabilidad.setItemText(7, _translate("Dialog", "PPG"))
        self.comboBox_trazabilidad.setItemText(8, _translate("Dialog", "EMG"))
        self.comboBox_trazabilidad.setItemText(9, _translate("Dialog", "Pruebas Psicol√≥gicas"))
        item = self.tableWidget_lineadetiempo.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Fecha"))
        item = self.tableWidget_lineadetiempo.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "Medidas"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Report()
    ui.setupUi(Dialog)
    Dialog.setWindowFlag(QtCore.Qt.WindowMinimizeButtonHint,True)
    Dialog.setWindowFlag(QtCore.Qt.WindowMaximizeButtonHint,True)
    Dialog.show()
    sys.exit(app.exec_())
